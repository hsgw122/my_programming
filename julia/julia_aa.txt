module MY
  struct SVOAgent_Data #変更しないパラメータ
    NAME
    angle::Float64
    self_w::Float64
    other_w::Float64
  end

  mutable struct SVOAgent_Memory #変更可能なパラメータ
    T::Float64 #実数
    k::Array{Float64,1} #一次元配列。要素が実数
    m::Array{Float64,1}
  end

  #宣言の方法
  function SVOAgent_Data(_NAME,_angle)
    NAME = _NAME
    angle = _angle
    return SVOAgent_Data(NAME,angle,cos(pi / 180 * angle),sin(pi / 180 * angle))
  end

end

using .MY

a = MY.SVOAgent_Data("hello",0)

#,cos(pi / 180 * 0),sin(pi / 180 * 0)

println(a.NAME," ",a.self_w," ",a.other_w)

b = MY.SVOAgent_Memory(1,[0],[0,1,2])
println(b.m,b.k)
sss = convert(Array{Float64,1},[2,2,2])
println(sss)
#末尾に追加。あらかじめ決まった数ならば遅い（代入の方が早い）
append!(b.m,[2,2,2])
#hcat(b.m,sss)
print(b.m)

function play(agent,matrix)
  #println("play")
  #println(agent.angle)
  #println(matrix[8])
  self_w = agent.self_w
  other_w = agent.other_w
  row_A = matrix[1] * self_w + matrix[2] * other_w + matrix[3] * self_w + matrix[4] * other_w
  row_B = matrix[5] * self_w + matrix[6] * other_w + matrix[7] * self_w + matrix[8] * other_w
  row = row_A - row_B
  #println(row)
  if row >= 0
    return 0
  else
    return 1
  end

end

play(a,[2,2,0,3,3,0,1,1])

test_list = rand(8,2)

println(test_list[:,1])

for i in 1:20
  println(rand())
end